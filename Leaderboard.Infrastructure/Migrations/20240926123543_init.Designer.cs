// <auto-generated />
using System;
using Leaderboard.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Leaderboard.Infrastructure.Migrations
{
    [DbContext(typeof(LeaderboardDbContext))]
    [Migration("20240926123543_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Leaderboard.Domain.Entities.Currency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Leaderboard.Domain.Entities.LeaderboardRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("AnnouncementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("JobType")
                        .HasColumnType("integer");

                    b.Property<int?>("LeaderboardTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("LeaderboardType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardTemplateId");

                    b.ToTable("LeaderboardRecords");
                });

            modelBuilder.Entity("Leaderboard.Domain.Entities.LeaderboardRecordPrize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EndRank")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LeaderboardRecordId")
                        .HasColumnType("integer");

                    b.Property<string>("PrizeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StartRank")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardRecordId");

                    b.HasIndex("PrizeId");

                    b.ToTable("LeaderboardRecordPrizes");
                });

            modelBuilder.Entity("Leaderboard.Domain.Entities.LeaderboardTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnouncementLeadTimeInDays")
                        .HasColumnType("integer");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("integer");

                    b.Property<int>("JobType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("LeaderboardTemplate");
                });

            modelBuilder.Entity("Leaderboard.Domain.Entities.LeaderboardTemplatePrize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EndRank")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LeaderboardTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("PrizeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StartRank")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardTemplateId");

                    b.HasIndex("PrizeId");

                    b.ToTable("LeaderboardTemplatePrize");
                });

            modelBuilder.Entity("Leaderboard.Domain.Entities.Prize", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Prize");
                });

            modelBuilder.Entity("Leaderboard.Domain.Entities.LeaderboardRecord", b =>
                {
                    b.HasOne("Leaderboard.Domain.Entities.LeaderboardTemplate", "LeaderboardTemplate")
                        .WithMany()
                        .HasForeignKey("LeaderboardTemplateId");

                    b.Navigation("LeaderboardTemplate");
                });

            modelBuilder.Entity("Leaderboard.Domain.Entities.LeaderboardRecordPrize", b =>
                {
                    b.HasOne("Leaderboard.Domain.Entities.LeaderboardRecord", "LeaderboardRecord")
                        .WithMany("LeaderboardRecordPrizes")
                        .HasForeignKey("LeaderboardRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leaderboard.Domain.Entities.Prize", "Prize")
                        .WithMany()
                        .HasForeignKey("PrizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaderboardRecord");

                    b.Navigation("Prize");
                });

            modelBuilder.Entity("Leaderboard.Domain.Entities.LeaderboardTemplatePrize", b =>
                {
                    b.HasOne("Leaderboard.Domain.Entities.LeaderboardTemplate", "LeaderboardTemplate")
                        .WithMany("LeaderboardTemplatePrizes")
                        .HasForeignKey("LeaderboardTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leaderboard.Domain.Entities.Prize", "Prize")
                        .WithMany()
                        .HasForeignKey("PrizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaderboardTemplate");

                    b.Navigation("Prize");
                });

            modelBuilder.Entity("Leaderboard.Domain.Entities.LeaderboardRecord", b =>
                {
                    b.Navigation("LeaderboardRecordPrizes");
                });

            modelBuilder.Entity("Leaderboard.Domain.Entities.LeaderboardTemplate", b =>
                {
                    b.Navigation("LeaderboardTemplatePrizes");
                });
#pragma warning restore 612, 618
        }
    }
}
