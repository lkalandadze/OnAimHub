// <auto-generated />
using System;
using AggregationService.Infrastructure.Persistance.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AggregationService.Infrastructure.Migrations
{
    [DbContext(typeof(AggregationServiceContext))]
    [Migration("20241224100612_Added_ContextId_ContextType_In_AggregationConfiguration")]
    partial class Added_ContextId_ContextType_In_AggregationConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AggregationService.Domain.Entities.Aggregation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Aggregations");
                });

            modelBuilder.Entity("AggregationService.Domain.Entities.AggregationConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AggregationId")
                        .HasColumnType("integer");

                    b.Property<int>("ConfigurationType")
                        .HasColumnType("integer");

                    b.Property<int>("ContextId")
                        .HasColumnType("integer");

                    b.Property<string>("ContextType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EarnableFund")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FundsEarned")
                        .HasColumnType("integer");

                    b.Property<int>("FundsSpent")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRepeatable")
                        .HasColumnType("boolean");

                    b.Property<string>("SpendableFund")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AggregationId");

                    b.ToTable("AggregationConfigurations");
                });

            modelBuilder.Entity("AggregationService.Domain.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("AggregationService.Domain.Entities.PlayerProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("CoinId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerProgresses");
                });

            modelBuilder.Entity("AggregationService.Domain.Entities.AggregationConfiguration", b =>
                {
                    b.HasOne("AggregationService.Domain.Entities.Aggregation", "Aggregation")
                        .WithMany("AggregationConfigurations")
                        .HasForeignKey("AggregationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aggregation");
                });

            modelBuilder.Entity("AggregationService.Domain.Entities.PlayerProgress", b =>
                {
                    b.HasOne("AggregationService.Domain.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("AggregationService.Domain.Entities.Aggregation", b =>
                {
                    b.Navigation("AggregationConfigurations");
                });
#pragma warning restore 612, 618
        }
    }
}
