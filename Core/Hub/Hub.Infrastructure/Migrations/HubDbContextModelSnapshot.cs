// <auto-generated />
using System;
using Hub.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hub.Infrastructure.Migrations
{
    [DbContext(typeof(HubDbContext))]
    partial class HubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hub.Domain.Entities.ConsulLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Registration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ConsulLogs");
                });

            modelBuilder.Entity("Hub.Domain.Entities.DbEnums.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("Hub.Domain.Entities.DbEnums.Currency", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Hub.Domain.Entities.DbEnums.PlayerLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PlayerLogTypes");
                });

            modelBuilder.Entity("Hub.Domain.Entities.DbEnums.PlayerSegmentActType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PlayerSegmentActTypes");
                });

            modelBuilder.Entity("Hub.Domain.Entities.DbEnums.PrizeType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.Property<string>("CurrencyId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("PrizeTypes");
                });

            modelBuilder.Entity("Hub.Domain.Entities.DbEnums.RewardSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RewardSource");
                });

            modelBuilder.Entity("Hub.Domain.Entities.DbEnums.TransactionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TransactionStatuses");
                });

            modelBuilder.Entity("Hub.Domain.Entities.DbEnums.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Hub.Domain.Entities.HubSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HubSettings");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("ExecutionTime")
                        .HasColumnType("interval");

                    b.Property<int?>("IntervalInDays")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastExecutedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("HasPlayed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastVisitedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ReferrerId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("RegistredOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PlayerBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PlayerBalances");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PlayerBan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateBanned")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("RevokeDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerBans");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PlayerLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Log")
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerLogTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerLogTypeId");

                    b.ToTable("PlayerLogs");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PlayerProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrencyId")
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerProgresses");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PlayerProgressHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrencyId")
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerProgressHistories");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PlayerSegmentAct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ByUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBulk")
                        .HasColumnType("boolean");

                    b.Property<string>("SegmentId")
                        .HasColumnType("text");

                    b.Property<int>("TotalPlayers")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("SegmentId");

                    b.ToTable("PlayerSegmentActs");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PlayerSegmentActHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerSegmentActId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerSegmentActId");

                    b.ToTable("PlayerSegmentActHistories");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Coin", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.Property<int?>("CoinTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("CoinType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CoinTemplateId");

                    b.HasIndex("PromotionId");

                    b.ToTable("Coins");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PromotionService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromotionServices");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PromotionView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer");

                    b.Property<int?>("PromotionViewTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.HasIndex("PromotionViewTemplateId");

                    b.ToTable("PromotionViews");
                });

            modelBuilder.Entity("Hub.Domain.Entities.ReferralDistribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReferralId")
                        .HasColumnType("integer");

                    b.Property<string>("ReferralPrizeCurrencyId")
                        .HasColumnType("text");

                    b.Property<string>("ReferralPrizeId")
                        .HasColumnType("text");

                    b.Property<int>("ReferralPrizeValue")
                        .HasColumnType("integer");

                    b.Property<int>("ReferrerId")
                        .HasColumnType("integer");

                    b.Property<string>("ReferrerPrizeCurrencyId")
                        .HasColumnType("text");

                    b.Property<string>("ReferrerPrizeId")
                        .HasColumnType("text");

                    b.Property<int>("ReferrerPrizeValue")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ReferralId");

                    b.HasIndex("ReferralPrizeCurrencyId");

                    b.HasIndex("ReferrerId");

                    b.HasIndex("ReferrerPrizeCurrencyId");

                    b.ToTable("ReferralDistributions");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Reward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClaimedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsClaimed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SourceId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("Hub.Domain.Entities.RewardPrize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PrizeTypeId")
                        .HasColumnType("text");

                    b.Property<int>("RewardId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PrizeTypeId");

                    b.HasIndex("RewardId");

                    b.ToTable("RewardPrizes");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Segment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnOrder(1);

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Templates.CoinTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoinType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CoinTemplates");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Templates.PromotionViewTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PromotionViewTemplates");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Templates.WithdrawEndpointTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContentType")
                        .HasColumnType("integer");

                    b.Property<string>("Endpoint")
                        .HasColumnType("text");

                    b.Property<string>("EndpointContent")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WithdrawEndpointTemplates");
                });

            modelBuilder.Entity("Hub.Domain.Entities.TokenRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("AccessTokenExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TokenRecords");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("text");

                    b.Property<int>("FromAccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("ToAccountId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FromAccountId");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("ToAccountId");

                    b.HasIndex("TypeId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Hub.Domain.Entities.WithdrawOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContentType")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Endpoint")
                        .HasColumnType("text");

                    b.Property<string>("EndpointContent")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("WithdrawEndpointTemplateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WithdrawEndpointTemplateId");

                    b.ToTable("WithdrawOptions");
                });

            modelBuilder.Entity("Hub.Domain.Entities.WithdrawOptionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WithdrawOptionGroups");
                });

            modelBuilder.Entity("PlayerBlockedSegmentMappings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("SegmentId")
                        .HasColumnType("text");

                    b.HasKey("PlayerId", "SegmentId");

                    b.HasIndex("SegmentId");

                    b.ToTable("PlayerBlockedSegmentMappings");
                });

            modelBuilder.Entity("PlayerSegmentMappings", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<string>("SegmentId")
                        .HasColumnType("text");

                    b.HasKey("PlayerId", "SegmentId");

                    b.HasIndex("SegmentId");

                    b.ToTable("PlayerSegmentMappings");
                });

            modelBuilder.Entity("PromotionSegmentMappings", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnType("integer");

                    b.Property<string>("SegmentId")
                        .HasColumnType("text");

                    b.HasKey("PromotionId", "SegmentId");

                    b.HasIndex("SegmentId");

                    b.ToTable("PromotionSegmentMappings");
                });

            modelBuilder.Entity("WithdrawOptionCoinTemplateMappings", b =>
                {
                    b.Property<int>("CoinTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("WithdrawOptionId")
                        .HasColumnType("integer");

                    b.HasKey("CoinTemplateId", "WithdrawOptionId");

                    b.HasIndex("WithdrawOptionId");

                    b.ToTable("WithdrawOptionCoinTemplateMappings");
                });

            modelBuilder.Entity("WithdrawOptionGroupMappings", b =>
                {
                    b.Property<int>("WithdrawOptionGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("WithdrawOptionId")
                        .HasColumnType("integer");

                    b.HasKey("WithdrawOptionGroupId", "WithdrawOptionId");

                    b.HasIndex("WithdrawOptionId");

                    b.ToTable("WithdrawOptionGroupMappings");
                });

            modelBuilder.Entity("WithdrawOptionPromotionCoinMappings", b =>
                {
                    b.Property<string>("PromotionCoinId")
                        .HasColumnType("text");

                    b.Property<int>("WithdrawOptionId")
                        .HasColumnType("integer");

                    b.HasKey("PromotionCoinId", "WithdrawOptionId");

                    b.HasIndex("WithdrawOptionId");

                    b.ToTable("WithdrawOptionPromotionCoinMappings");
                });

            modelBuilder.Entity("Hub.Domain.Entities.DbEnums.PrizeType", b =>
                {
                    b.HasOne("Hub.Domain.Entities.DbEnums.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PlayerBalance", b =>
                {
                    b.HasOne("Hub.Domain.Entities.DbEnums.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Hub.Domain.Entities.Player", "Player")
                        .WithMany("PlayerBalances")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Player");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PlayerBan", b =>
                {
                    b.HasOne("Hub.Domain.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PlayerLog", b =>
                {
                    b.HasOne("Hub.Domain.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.DbEnums.PlayerLogType", "PlayerLogType")
                        .WithMany()
                        .HasForeignKey("PlayerLogTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("PlayerLogType");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PlayerProgress", b =>
                {
                    b.HasOne("Hub.Domain.Entities.DbEnums.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Hub.Domain.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PlayerProgressHistory", b =>
                {
                    b.HasOne("Hub.Domain.Entities.DbEnums.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Hub.Domain.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PlayerSegmentAct", b =>
                {
                    b.HasOne("Hub.Domain.Entities.DbEnums.PlayerSegmentActType", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId");

                    b.HasOne("Hub.Domain.Entities.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId");

                    b.Navigation("Action");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PlayerSegmentActHistory", b =>
                {
                    b.HasOne("Hub.Domain.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.PlayerSegmentAct", "PlayerSegmentAct")
                        .WithMany()
                        .HasForeignKey("PlayerSegmentActId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("PlayerSegmentAct");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Coin", b =>
                {
                    b.HasOne("Hub.Domain.Entities.Templates.CoinTemplate", "CoinTemplate")
                        .WithMany()
                        .HasForeignKey("CoinTemplateId");

                    b.HasOne("Hub.Domain.Entities.Promotion", "Promotion")
                        .WithMany("Coins")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoinTemplate");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PromotionService", b =>
                {
                    b.HasOne("Hub.Domain.Entities.Promotion", "Promotion")
                        .WithMany("Services")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Hub.Domain.Entities.PromotionView", b =>
                {
                    b.HasOne("Hub.Domain.Entities.Promotion", "Promotion")
                        .WithMany("Views")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.Templates.PromotionViewTemplate", "PromotionViewTemplate")
                        .WithMany("PromotionViews")
                        .HasForeignKey("PromotionViewTemplateId");

                    b.Navigation("Promotion");

                    b.Navigation("PromotionViewTemplate");
                });

            modelBuilder.Entity("Hub.Domain.Entities.ReferralDistribution", b =>
                {
                    b.HasOne("Hub.Domain.Entities.Player", "Referral")
                        .WithMany()
                        .HasForeignKey("ReferralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.DbEnums.Currency", "ReferralPrizeCurrency")
                        .WithMany()
                        .HasForeignKey("ReferralPrizeCurrencyId");

                    b.HasOne("Hub.Domain.Entities.Player", "Referrer")
                        .WithMany()
                        .HasForeignKey("ReferrerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.DbEnums.Currency", "ReferrerPrizeCurrency")
                        .WithMany()
                        .HasForeignKey("ReferrerPrizeCurrencyId");

                    b.Navigation("Referral");

                    b.Navigation("ReferralPrizeCurrency");

                    b.Navigation("Referrer");

                    b.Navigation("ReferrerPrizeCurrency");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Reward", b =>
                {
                    b.HasOne("Hub.Domain.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.DbEnums.RewardSource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Hub.Domain.Entities.RewardPrize", b =>
                {
                    b.HasOne("Hub.Domain.Entities.DbEnums.PrizeType", "PrizeType")
                        .WithMany()
                        .HasForeignKey("PrizeTypeId");

                    b.HasOne("Hub.Domain.Entities.Reward", "Reward")
                        .WithMany("Prizes")
                        .HasForeignKey("RewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrizeType");

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Hub.Domain.Entities.DbEnums.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Hub.Domain.Entities.DbEnums.AccountType", "FromAccount")
                        .WithMany()
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("Hub.Domain.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.Promotion", "Promotion")
                        .WithMany("Transactions")
                        .HasForeignKey("PromotionId");

                    b.HasOne("Hub.Domain.Entities.DbEnums.TransactionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.DbEnums.AccountType", "ToAccount")
                        .WithMany()
                        .HasForeignKey("ToAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.DbEnums.TransactionType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("FromAccount");

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Promotion");

                    b.Navigation("Status");

                    b.Navigation("ToAccount");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Hub.Domain.Entities.WithdrawOption", b =>
                {
                    b.HasOne("Hub.Domain.Entities.Templates.WithdrawEndpointTemplate", "WithdrawEndpointTemplate")
                        .WithMany()
                        .HasForeignKey("WithdrawEndpointTemplateId");

                    b.Navigation("WithdrawEndpointTemplate");
                });

            modelBuilder.Entity("PlayerBlockedSegmentMappings", b =>
                {
                    b.HasOne("Hub.Domain.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.Segment", null)
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerSegmentMappings", b =>
                {
                    b.HasOne("Hub.Domain.Entities.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.Segment", null)
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PromotionSegmentMappings", b =>
                {
                    b.HasOne("Hub.Domain.Entities.Promotion", null)
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.Segment", null)
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WithdrawOptionCoinTemplateMappings", b =>
                {
                    b.HasOne("Hub.Domain.Entities.Templates.CoinTemplate", null)
                        .WithMany()
                        .HasForeignKey("CoinTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.WithdrawOption", null)
                        .WithMany()
                        .HasForeignKey("WithdrawOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WithdrawOptionGroupMappings", b =>
                {
                    b.HasOne("Hub.Domain.Entities.WithdrawOptionGroup", null)
                        .WithMany()
                        .HasForeignKey("WithdrawOptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.WithdrawOption", null)
                        .WithMany()
                        .HasForeignKey("WithdrawOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WithdrawOptionPromotionCoinMappings", b =>
                {
                    b.HasOne("Hub.Domain.Entities.Coin", null)
                        .WithMany()
                        .HasForeignKey("PromotionCoinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hub.Domain.Entities.WithdrawOption", null)
                        .WithMany()
                        .HasForeignKey("WithdrawOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hub.Domain.Entities.Player", b =>
                {
                    b.Navigation("PlayerBalances");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Promotion", b =>
                {
                    b.Navigation("Coins");

                    b.Navigation("Services");

                    b.Navigation("Transactions");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Reward", b =>
                {
                    b.Navigation("Prizes");
                });

            modelBuilder.Entity("Hub.Domain.Entities.Templates.PromotionViewTemplate", b =>
                {
                    b.Navigation("PromotionViews");
                });
#pragma warning restore 612, 618
        }
    }
}
